type Photo {
  id: ID!
  uuid: String!
  location: AWSJSON!
  likes: Int!
  commentsCount: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  active: Boolean!
  imgUrl: String!
  thumbUrl: String!
}
# input CreatePhotoInput {
#   id: ID!
#   uuid: String!
#   location: AWSJSON!
#   likes: Int!
#   commentsCount: Int!
#   createdAt: AWSDateTime!
#   updatedAt: AWSDateTime!
#   active: Boolean!
# }
#
# input UpdatePhotoInput {
#   id: ID!
#   likes: Int!
#   commentsCount: Int!
#   updatedAt: AWSDateTime!
#   active: Boolean!
# }

type AbuseReport {
  id: ID!
  photo: Photo!
  uuid: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}
input AbuseReportInputCreate {
  photoId: ID!
  uuid: String!
}

type Query {
  # getPhotoById(photoId: ID!): Photo
}

type Mutation {
  abuseReportsCreate(abuseReport: AbuseReportInputCreate!): AbuseReport!
}
#
# type Subscription {
#   onCreatePhoto: Photo
#     @aws_subscribe(mutations: ["createPhoto"])
#   onUpdatePhoto: Photo
#     @aws_subscribe(mutations: ["updatePhoto"])
#   onDeletePhoto: Photo
#     @aws_subscribe(mutations: ["deletePhoto"])
# }
