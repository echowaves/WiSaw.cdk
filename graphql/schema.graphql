schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

# ... ******************************************************
# ...                   types
# ... ******************************************************
type ContactForm {
  id: ID!
  uuid: String!
  description: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Photo {
  row_number: Int!
  id: ID!
  uuid: String!
  location: AWSJSON!
  commentsCount: Int!
  watchersCount: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  active: Boolean!
  imgUrl: String!
  thumbUrl: String!
  videoUrl: String!
  lastComment: String!
  video: Boolean!
}

type AbuseReport {
  id: ID!
  # photo: Photo!
  photoId: ID!
  uuid: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type PhotoFeed {
  photos: [Photo]
  batch: String!
  noMoreData: Boolean!
}

type PhotoDetails {
  comments: [Comment]
  recognitions: [Recognition]
  isPhotoWatched: Boolean!
}

type PhotoAll {
  photo: Photo
  comments: [Comment]
  recognitions: [Recognition]
}

type Watcher {
  id: ID!
  photoId: ID!
  uuid: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  watchedAt: AWSDateTime!
}

type Comment {
  id: ID!
  photoId: ID!
  uuid: String!
  active: Boolean!
  comment: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Recognition {
  id: ID!
  photoId: ID!
  metaData: AWSJSON!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Secret {
  uuid: String!
  nickName: String!
  # secret: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Friendship {
  friendshipUuid: String!
  uuid1: String! 
  uuid2: String # if uuid2 is null == friendship is not confirmed
  chatUuid: String!
  createdAt: AWSDateTime!  
}

type Chat {  
  chatUuid: String!
  createdAt: AWSDateTime!  
}
type ChatUser {  
  uuid: String!
  chatUuid: String!
  invitedByUuid: String! 
  createdAt: AWSDateTime!  
  lastReadAt: AWSDateTime!  
}

type UnreadCount {  
  chatUuid: String!
  unread: Int!  
  updatedAt: AWSDateTime!
}

type CreateFriendshipResult {
  friendship: Friendship!
  chat: Chat!
  chatUser: ChatUser!
}

type Message{  
  chatUuid: String!
  uuid: String!
  messageUuid: String!
  text: String! 
  pending: Boolean
  chatPhotoUuid: String!
  createdAt: AWSDateTime!  
  updatedAt: AWSDateTime!  
}

# ... ******************************************************
# ...                   queries
# ... ******************************************************
type Query {
  generateUploadUrl(
    assetKey: String!
    contentType: String!
    ): String!
  zeroMoment: AWSDateTime!

  feedByDate(
    daysAgo: Int!
    lat: Float!
    lon: Float!
    batch: String!
    whenToStop: AWSDateTime!
    ): PhotoFeed
  feedForWatcher(
    uuid: String!
    pageNumber: Int!
    batch: String!
    ): PhotoFeed
  feedForTextSearch(
      searchTerm: String!
      pageNumber: Int!
      batch: String!
    ): PhotoFeed

  getPhotoDetails(
    photoId: ID!
    uuid: String!
    ): PhotoDetails!

  getPhotoAllCurr( photoId: ID!): PhotoAll!
  getPhotoAllNext( photoId: ID!): PhotoAll!
  getPhotoAllPrev( photoId: ID!): PhotoAll!

  # freindship management 
  # getFriendInFriendship(     
  #   friendshipUuid: String!
  #   uuid: String! # self
  # ): Friend! #every friendship has only 2 friends, this returns the other side of the friendship
  
  getFriendshipsList(
      uuid: String! # self  
  ): [Friendship]! #list of all friends by UUID, if uuid2 of a friend is null, the friendship is not confirmed

  getUnreadCountsList(
      uuid: String! # self  
  ): [UnreadCount]! #list of all underads counts for given uuid



  getMessagesList(
     chatUuid: String!
     lastLoaded: AWSDateTime!
  ): [Message]!
}

# ... ******************************************************
# ...                    mutations
# ... ******************************************************
type Mutation {
  createContactForm(
    uuid: String!
    description: String!
  ): ContactForm!

  createAbuseReport(
    photoId: ID!
    uuid: String!
  ): AbuseReport!

  createPhoto(
    uuid: String!
    lat: Float!
    lon: Float!
    video: Boolean
  ): Photo!

  watchPhoto(
      photoId: ID!
      uuid: String!
    ): Int!
  unwatchPhoto(
      photoId: ID!
      uuid: String!
    ): Int!

  deletePhoto(
      photoId: ID!
      uuid: String!
    ): String!

  createComment(
      photoId: ID!
      uuid: String!
      description: String!
    ): Comment!
  deleteComment(
      commentId: ID!
      uuid: String!
    ): String! # returns "OK"

  registerSecret(
    uuid: String!
    nickName: String!
    secret: String!    
  ): Secret!
  updateSecret(
    uuid: String!
    nickName: String!
    secret: String!    
    newSecret: String!
  ): Secret!

# freindship management 
  createFriendship(
      uuid: String!
  ): CreateFriendshipResult!
  acceptFriendshipRequest(
    friendshipUuid: String!
    uuid: String! # self
  ): CreateFriendshipResult! # returns the ChatUser from the other side of the friendship
  deleteFriendship(
    friendshipUuid: String!
  ): String! # returns "OK"
  
  # messages
  sendMessage(
    chatUuidArg: String!
    uuidArg: String!
    messageUuidArg: String!
    textArg: String! 
  ): Message!
  
  resetUnreadCount(
    chatUuid: String!
    uuid: String!
  ): String! #returns current date time

  # helloWorld(helloMessage: String!): String!
   
}

# ... ******************************************************
# ...                    subscriptions
# ... ******************************************************
# onSendMessage(chatUuid: String!): Message!

# only works with nullable return types, the return type must match corresponding mutation
type Subscription {
  onSendMessage(
    chatUuid: String
  ): Message
    @aws_subscribe(mutations: ["sendMessage"])

  # onHelloWorld(helloMessage: String): String
  #   @aws_subscribe(mutations: ["helloWorld"])
}
